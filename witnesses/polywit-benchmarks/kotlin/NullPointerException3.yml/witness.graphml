<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
    <default>&lt;command-line&gt;</default>
  </key>
  <key attr.name="invariant" attr.type="string" for="node" id="invariant"/>
  <key attr.name="invariant.scope" attr.type="string" for="node" id="invariant.scope"/>
  <key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation">
    <default>false</default>
  </key>
  <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
    <default>false</default>
  </key>
  <key attr.name="isSinkNode" attr.type="boolean" for="node" id="sink">
    <default>false</default>
  </key>
  <key attr.name="enterLoopHead" attr.type="boolean" for="edge" id="enterLoopHead">
    <default>false</default>
  </key>
  <key attr.name="cyclehead" attr.type="boolean" for="edge" id="cyclehead">
    <default>false</default>
  </key>
  <key attr.name="threadId" attr.type="int" for="edge" id="threadId">
    <default>0</default>
  </key>
  <key attr.name="createThread" attr.type="int" for="edge" id="createThread">
    <default>0</default>
  </key>
  <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
  <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
  <key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
  <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
  <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
  <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
  <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
  <key attr.name="control" attr.type="string" for="edge" id="control"/>
  <key attr.name="assumption" attr.type="string" for="edge" id="assumption"/>
  <key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/>
  <key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/>
  <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
  <key attr.name="returnFromFunction" attr.type="string" for="edge" id="returnFrom"/>
  <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
  <graph edgedefault="directed">
    <data key="sourcecodelang">C</data>
    <data key="witness-type">violation_witness</data>
    <node id="sink"/>
    <node id="907.128">
      <data key="entry">true</data>
    </node>
    <edge source="907.128" target="0.164">
      <data key="originfile">Main.kt</data>
      <data key="startline">14</data>
      <data key="threadId">0</data>
    </edge>
    <node id="0.164"/>
    <edge source="0.164" target="24.168">
      <data key="originfile">kotlin/jvm/internal/Intrinsics.java</data>
      <data key="startline">130</data>
      <data key="threadId">0</data>
    </edge>
    <node id="24.168"/>
    <edge source="24.168" target="25.171">
      <data key="originfile">Main.kt</data>
      <data key="startline">14</data>
      <data key="threadId">0</data>
      <data key="assumption">a = null;</data>
      <data key="assumption.scope">java::MainKt.main:([Ljava/lang/String;)V</data>
    </edge>
    <node id="25.171"/>
    <edge source="25.171" target="251.177">
      <data key="originfile">Main.kt</data>
      <data key="startline">16</data>
      <data key="threadId">0</data>
      <data key="assumption">object = null;</data>
      <data key="assumption.scope">java</data>
    </edge>
    <node id="251.177"/>
    <edge source="251.177" target="255.183">
      <data key="originfile">kotlin/jvm/internal/Intrinsics.java</data>
      <data key="startline">45</data>
      <data key="threadId">0</data>
    </edge>
    <node id="255.183"/>
    <edge source="255.183" target="256.188">
      <data key="originfile">kotlin/jvm/internal/Intrinsics.java</data>
      <data key="startline">45</data>
      <data key="threadId">0</data>
    </edge>
    <node id="256.188"/>
    <edge source="256.188" target="276.193">
      <data key="originfile">kotlin/jvm/internal/Intrinsics.java</data>
      <data key="startline">45</data>
      <data key="threadId">0</data>
    </edge>
    <node id="276.193"/>
    <edge source="276.193" target="279.204">
      <data key="originfile">kotlin/jvm/internal/Intrinsics.java</data>
      <data key="startline">251</data>
      <data key="threadId">0</data>
      <data key="assumption">this = &amp;kotlin.jvm.internal.Intrinsics@class_model;</data>
      <data key="assumption.scope">java</data>
    </edge>
    <node id="279.204"/>
    <edge source="279.204" target="555.213">
      <data key="originfile">kotlin/jvm/internal/Intrinsics.java</data>
      <data key="startline">251</data>
      <data key="threadId">0</data>
    </edge>
    <node id="555.213"/>
    <edge source="555.213" target="558.225">
      <data key="originfile">kotlin/jvm/internal/Intrinsics.java</data>
      <data key="startline">255</data>
      <data key="threadId">0</data>
    </edge>
    <node id="558.225"/>
    <edge source="558.225" target="559.226">
      <data key="originfile">kotlin/jvm/internal/Intrinsics.java</data>
      <data key="startline">255</data>
      <data key="threadId">0</data>
      <data key="assumption">stackTrace = null;</data>
      <data key="assumption.scope">java::kotlin.jvm.internal.Intrinsics.sanitizeStackTrace:(Ljava/lang/Throwable;Ljava/lang/String;)Ljava/lang/Throwable;</data>
    </edge>
    <node id="559.226">
      <data key="violation">true</data>
    </node>
  </graph>
</graphml>
