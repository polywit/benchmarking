<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<graphml xmlns="http://graphml.graphdrawing.org/xmlns" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <key attr.name="originFileName" attr.type="string" for="edge" id="originfile">
    <default>&lt;command-line&gt;</default>
  </key>
  <key attr.name="invariant" attr.type="string" for="node" id="invariant"/>
  <key attr.name="invariant.scope" attr.type="string" for="node" id="invariant.scope"/>
  <key attr.name="isViolationNode" attr.type="boolean" for="node" id="violation">
    <default>false</default>
  </key>
  <key attr.name="isEntryNode" attr.type="boolean" for="node" id="entry">
    <default>false</default>
  </key>
  <key attr.name="isSinkNode" attr.type="boolean" for="node" id="sink">
    <default>false</default>
  </key>
  <key attr.name="enterLoopHead" attr.type="boolean" for="edge" id="enterLoopHead">
    <default>false</default>
  </key>
  <key attr.name="cyclehead" attr.type="boolean" for="edge" id="cyclehead">
    <default>false</default>
  </key>
  <key attr.name="threadId" attr.type="int" for="edge" id="threadId">
    <default>0</default>
  </key>
  <key attr.name="createThread" attr.type="int" for="edge" id="createThread">
    <default>0</default>
  </key>
  <key attr.name="sourcecodeLanguage" attr.type="string" for="graph" id="sourcecodelang"/>
  <key attr.name="programFile" attr.type="string" for="graph" id="programfile"/>
  <key attr.name="programHash" attr.type="string" for="graph" id="programhash"/>
  <key attr.name="specification" attr.type="string" for="graph" id="specification"/>
  <key attr.name="architecture" attr.type="string" for="graph" id="architecture"/>
  <key attr.name="producer" attr.type="string" for="graph" id="producer"/>
  <key attr.name="startline" attr.type="int" for="edge" id="startline"/>
  <key attr.name="control" attr.type="string" for="edge" id="control"/>
  <key attr.name="assumption" attr.type="string" for="edge" id="assumption"/>
  <key attr.name="assumption.resultfunction" attr.type="string" for="edge" id="assumption.resultfunction"/>
  <key attr.name="assumption.scope" attr.type="string" for="edge" id="assumption.scope"/>
  <key attr.name="enterFunction" attr.type="string" for="edge" id="enterFunction"/>
  <key attr.name="returnFromFunction" attr.type="string" for="edge" id="returnFrom"/>
  <key attr.name="witness-type" attr.type="string" for="graph" id="witness-type"/>
  <graph edgedefault="directed">
    <data key="sourcecodelang">C</data>
    <data key="witness-type">violation_witness</data>
    <node id="sink"/>
    <node id="316.51">
      <data key="entry">true</data>
    </node>
    <edge source="316.51" target="90.109">
      <data key="originfile">Main.kt</data>
      <data key="startline">4</data>
      <data key="threadId">0</data>
    </edge>
    <node id="90.109"/>
    <edge source="90.109" target="26.122">
      <data key="originfile">org/polywit/benchmarks/Verifier.kt</data>
      <data key="startline">5</data>
      <data key="threadId">0</data>
    </edge>
    <node id="26.122"/>
    <edge source="26.122" target="3.125">
      <data key="originfile">Main.kt</data>
      <data key="startline">4</data>
      <data key="threadId">0</data>
    </edge>
    <node id="3.125"/>
    <edge source="3.125" target="7.131">
      <data key="originfile">org/polywit/benchmarks/Verifier.kt</data>
      <data key="startline">29</data>
      <data key="threadId">0</data>
    </edge>
    <node id="7.131"/>
    <edge source="7.131" target="10.136">
      <data key="originfile">org/polywit/benchmarks/Verifier.kt</data>
      <data key="startline">29</data>
      <data key="threadId">0</data>
    </edge>
    <node id="10.136"/>
    <edge source="10.136" target="29.144">
      <data key="originfile">org/polywit/benchmarks/Verifier.kt</data>
      <data key="startline">29</data>
      <data key="threadId">0</data>
    </edge>
    <node id="29.144"/>
    <edge source="29.144" target="30.145">
      <data key="originfile">Main.kt</data>
      <data key="startline">4</data>
      <data key="threadId">0</data>
      <data key="assumption">size = 5;</data>
      <data key="assumption.scope">java::MainKt.main:([Ljava/lang/String;)V</data>
    </edge>
    <node id="30.145"/>
    <edge source="30.145" target="39.148">
      <data key="originfile">Main.kt</data>
      <data key="startline">5</data>
      <data key="threadId">0</data>
    </edge>
    <node id="39.148"/>
    <edge source="39.148" target="47.166">
      <data key="originfile">Main.kt</data>
      <data key="startline">7</data>
      <data key="threadId">0</data>
    </edge>
    <node id="47.166"/>
    <edge source="47.166" target="50.167">
      <data key="originfile">Main.kt</data>
      <data key="startline">7</data>
      <data key="threadId">0</data>
    </edge>
    <node id="50.167"/>
    <edge source="50.167" target="52.169">
      <data key="originfile">Main.kt</data>
      <data key="startline">8</data>
      <data key="threadId">0</data>
    </edge>
    <node id="52.169">
      <data key="violation">true</data>
    </node>
  </graph>
</graphml>
